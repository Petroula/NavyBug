import com.aldebaran.proxy.*;

/**
 *  @author Petroula
 *  
 *  NAO escaping a maze - the solution is based on the "wall follower" algorithm ("right hand rule").
 *  Essentially, NAO checks every few steps if there is a wall on its right side, leading finally
 *  to an opening somewhere in the maze. The program can terminate by touching the robot's head.
 *  Without it, the robot will execute the algorithm forever.
 *   
 */

public class MazeWalker {
	
	static NaoRobot nao = new NaoRobot();
	
	// IP address to be changed accordingly
	static String NAOQI_IP = "192.168.0.1";
	static int NAOQI_PORT = 9559;
	static ALSonarProxy sonar = new ALSonarProxy(NAOQI_IP, NAOQI_PORT);
	static ALMemoryProxy memory = new ALMemoryProxy(NAOQI_IP, NAOQI_PORT);
	static ALSensorsProxy sensors = new ALSensorsProxy(NAOQI_IP, NAOQI_PORT);
	static ALMotionProxy movement = new ALMotionProxy(NAOQI_IP, NAOQI_PORT);
	static ALTextToSpeechProxy talk = new ALTextToSpeechProxy(NAOQI_IP, NAOQI_PORT);
	static ALRobotPostureProxy posture = new ALRobotPostureProxy(NAOQI_IP, NAOQI_PORT);
	
	// Accesses the sonar value keys 
	static String leftSonar = "Device/SubDeviceList/US/Left/Sensor/Value";
	static String rightSonar = "Device/SubDeviceList/US/Right/Sensor/Value";
	
	// Accesses the head touch value keys
	static String frontHead = "Device/SubDeviceList/Head/Touch/Front/Sensor/Value";
	static String middleHead = "Device/SubDeviceList/Head/Touch/Middle/Sensor/Value";
	static String rearHead = "Device/SubDeviceList/Head/Touch/Rear/Sensor/Value";
	
	    // Loads the jnaoqi library
		static {
		System.loadLibrary("jnaoqi");
		}
	
		
	public static void escapeMaze() {
		
		// Subscribes to sonar event
		sonar.subscribe("Sonar");
		
		// Subscribes to foot bumpers
		sensors.subscribe("LeftBumperPressed");	
		sensors.subscribe("RightBumperPressed");
		
		// Subscribes to head tactile sensors
		sensors.subscribe("FrontTactilTouched");
		sensors.subscribe("MiddleTactilTouched");
		sensors.subscribe("RearTactilTouched");
		
       // Checks the sensors values
		while((memory.getData(frontHead).toFloat() != 1.0) || (memory.getData(middleHead).toFloat() != 1.0)
			|| (memory.getData(rearHead).toFloat() != 1.0)) {
			
			// Checks for obstacle
			if(!(memory.getData(leftSonar).toFloat() >0.5) || !(memory.getData(rightSonar).toFloat() > 0.5)) {
				System.out.println("obstacle detected");
				
				// Checks the sensors values
				if(touch()==true){
					System.out.println(" End ");
					break;
				}
				nao.turnLeft();	
				
				// Checks the sensors values
				if(touch()==true){
					System.out.println(" End ");
					break;
				}
				if(memory.getData(leftSonar).toFloat() > 0.5 || memory.getData(rightSonar).toFloat() > 0.5) {
					nao.moveForward();
					
					// Checks the sensors values
					if(touch()==true){
						System.out.println(" End ");
						break;
					}
					if(memory.getData("LeftBumperPressed").toFloat() == 1.0 || memory.getData("RightBumperPressed").toFloat() == 1.0) {
						nao.moveBackwards();
						
						// Checks the sensors values
						if(touch()==true){
							System.out.println(" End ");
							break;
						}
						escapeMaze();
					}
        		 }else{
        			nao.turnLeft();
        			
        			// Checks the sensors values
        			if(touch()==true){
    					System.out.println(" End ");
    					break;
    				}
        			nao.moveForward();
        			
        			// Checks the sensors values
        			if(touch()==true){
    					System.out.println(" End ");
    					break;
    				}
        			if(memory.getData("LeftBumperPressed").toFloat() == 1.0 || memory.getData("RightBumperPressed").toFloat() == 1.0) {
        				nao.moveBackwards();
        				
        				// Checks the sensors values
        				if(touch()==true){
        					System.out.println(" End ");
        					break;
        				}
        				escapeMaze();
        			 }
        		 }
				nao.turnRight();
				
				// Checks the sensors values
				if(touch()==true){
					System.out.println(" End ");
					break;
				}
        		escapeMaze();
        	}else{
        		
        		// Checks the sensors values
        		if(touch()==true){
					System.out.println(" End ");
					break;
				}
        		nao.moveForward();
        		
        		// Checks the sensors values
        		if(touch()==true){
					System.out.println(" End ");
					break;
				}
        		escapeMaze();
        	}
         }
      }
	
	// Checks if one of Nao's tactile sensors (head) is touched in order to terminate the program
	public static boolean touch(){
		if((memory.getData(frontHead).toFloat() == 1.0) || (memory.getData(middleHead).toFloat() == 1.0)
				|| (memory.getData(rearHead).toFloat() == 1.0)){
			return true;
		}
		return false;
	}
    
	public static void main(String[] args) {
		posture.goToPosture("Stand", 1);
		nao.turnRight();
		escapeMaze();			
	}
}
